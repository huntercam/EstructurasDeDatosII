1.
test :: (Num a, Eq a) => (a -> a) -> a -> Bool
esMenor :: Ord -> Ord -> Bool
eq :: Eq -> Eq -> Bool
showVal :: (Show a) => a -> String

2.
(+5) :: Num -> Num
(0<) :: (Ord a, Num a) => a -> Bool
('a':) :: String -> String
(++ "\n") :: String -> String
filter(==7) ::  (Eq a,Num a) => [a] -> [a]
map(++[1]) :: [[Num]] -> [[Num]]

3.

zero = (0::Int)
(Int -> Int) -> Int //  f g = g zero + zero
Int -> (Int -> Int) // f a b = a+b+zero
(Int -> Int) -> (Int -> Int) === (Int -> Int) -> Int -> Int // f g a = (g (a+zero) )+zero 
Int -> Bool // f a = a+zero == zero
Bool -> (Bool -> Bool) === Bool -> Bool -> Bool // f a b = (a == True) && (a == b) 
(Int,Char) -> Bool // f (x,c) = (x == zero) && (c == 'a')
(Int, Int) -> Int // f (x,y) = x+y+zero
Int -> (Int,Int) // f x = (x+zero,x)
a -> Bool // f a = True
a -> a // f a = a
